import createClient, { type Middleware } from "openapi-fetch";
import { TOKEN_KEY } from "src/utils/constants/storage";

import type { paths } from "./types"; // generated by openapi-typescript

console.log(`%c import.meta.env.VITE_API_URL: ${import.meta.env.VITE_API_URL}`, 'background: #222; color: #bada55');

export const apiService = createClient<paths>({
  baseUrl: import.meta.env.VITE_API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});


const authMiddleware: Middleware = {
  async onRequest({ request }) {
    const accessToken = localStorage.getItem(TOKEN_KEY);

    // (optional) add logic here to refresh token when it expires

    // add Authorization header to every request
    request.headers.set("Authorization", `Bearer ${accessToken}`);
    return request;
  },
  // async onResponse({ request, response, options }) {
  //   const { body, ...resOptions } = response;
  //   // change status of response
  //   return new Response(body, { ...resOptions, status: 200 });
  // },
  // async onError({ error }) {
  //   // wrap errors thrown by fetch
  //   onError({ error }) {
  //     return new Error("Oops, fetch failed", { cause: error });
  //   },
  // },
};

apiService.use(authMiddleware);
